/**
 * 1. 编辑器控件服务: pluginSrv.srv.js
 *
 * 2. 在srv里面调用，如下：
 *                var service = new Service('editor.editorSrvII.templateSrv');
 *                param.funName = "findById";//方法名称
 *                var data = service.callService(param);
 *
 * 3. 在VOP上面调用，调用方法跟普通的srv方式一样，只不过需要在原有的参数上面增加一个参数funName，如下：
 *                var param = {};
 *                param.funName = "findById";
 *                param.id = XX;
 *                var databind = $W.databind.databind({
 * 					id : 'save',
 * 					isSrv : true,
 * 					groupId : "editor.editorSrvII"
 * 				});
 *                databind.submit("templateSrv", param, {
 * 					async : false
 * 				}, function(res) {
 * 					var data = res.data;
 * 				});
 *
 * @Autor : king
 * @Date : 2017-05-18
 */
var toJs = require('nodejava').toJs;
var spring = require("spring");
var result = {};
result.data = '';
result.msg = '操作失败';
result.code = 500;
var isDataSeq = param.isDataSeq || true; //20180122 king 是否手动读取主键序列号.
var datasource = "";
var thisUserId = com.tt.pwp.framework.security.SecurityUtils.getLoginAccountId();
var thisTime = com.tt.pwp.framework.util.formatter.DateFormatterUtil.long2YYYY_MM_DDHH24miss(new java.util.Date());
var logger = com.tt.pwp.framework.util.log.LogUtil();
logger.info("pluginSrv.srv.js---thisUserId:" + thisUserId + "---thisTime:" + thisTime + "---Param:" + JSON.stringify(param));
if (param && param.datasource) {
    var dsMgr = require('pwp-datasource');  //数据源管理对象
    db = dsMgr.db(param.datasource);        //调用db([datasouceId])函数得到指定的数据源对象,dsMgr.db('default')可得到默认数据源
    datasource = param.datasource;
}

var handler = {
    /**
     * 测试改srv 中调用别的srv方法；
     */
    test: function (param) {
        var service = {};
        service.code = 500;

        param.funName = "findById";// 方法名称
        service.data = new Service('editor.editorSrvII.templateSrv').callService(param);

        return service;
    },
    getBankCodeSql: function (AllControl) {
        var sql = "select * from TP_PLUGIN where 1=1 ";
        var noExists = [];
        if (AllControl) {
            for (var i = 0, al = AllControl.length; i < al; i++) {
                var jsonStr = AllControl[i];
                if (jsonStr.VER_ID) {
                    sql += " or t.ver_id = " + jsonStr.VER_ID;
                } else {
                    noExists.push(jsonStr);
                }
            }
        }

        var res = {
            sql: sql,
            noExist: noExists
        }
        return res;
    },
    handelResult: function (resultList, AllControl) {
        var resultObject = [];
        for (var i = 0, rl = resultList.length; i < rl; i++) {
            var result = resultList[i];
            for (var j = 0, al = AllControl.length; i < al; j++) {
                var jsonStr = AllControl[j];
                if (result.ver_id != jsonStr.ver_id) {
                    resultObject.push(this.addPlugin(jsonStr));
                }
            }
        }
        return resultObject;
    },
    checkAll: function (param) {
        var allControl = param.allControl;
        var res = this.getBankCodeSql(allControl);
        var resultList = db.queryForList(res.sql);
        var resultObject = this.handelResult(resultList, allControl);

        return resultObject;
    },
    /**
     * 根据ID查询某一个。当没有版本号时，返回最新版本号的ID
     */
    findById: function (param) {

        var plugins;
        if (param.id && param.ver_id) {
            plugins = toJs.parse(db.dao.findAll("editor.editorModel.tp_plugin", "id = ? and ver_id = ? ", [param.id, param.ver_id]));
        } else if (param.ver_id) {
            plugins = toJs.parse(db.dao.findAll("editor.editorModel.tp_plugin", "ver_id = ? ", [param.ver_id]));
        } else {
            var sql = "select * from tp_plugin where ver_id = (select max(ver_id) from tp_plugin where id = ?)";
            plugins = toJs.parse(db.queryForList(sql, [param.id]));
        }
        plugins = this.plugin_and_ex(plugins);
        result.data = plugins;
        if (plugins) {
            result.msg = '查询成功';
            result.code = 200;
        }
        return result;
    },
    /**
     * 根据VID查询某一个
     */
    findByVId: function (param) {
        var plugins = toJs.parse(db.dao.findAll("editor.editorModel.tp_plugin", "ver_id = ? ", [param.ver_id]));
        plugins = this.plugin_and_ex(plugins);
        result.data = plugins;
        if (plugins) {
            result.msg = '查询成功';
            result.code = 200;
        }
        return result;
    },
    /**
     * 根据Param查询某一个或者多个
     */
    findByParam: function (param) {
        var where = "";
        var wheredata = [];
        var i = 0;
        var temp = "and ";
        delete (param['funName']);
        for (var key in param) {
            where += temp + key + " =? ";
            wheredata[i] = param[key];
            i++;
        }
        where = where.substring(temp.length, where.length);
        // console.log("where:" + where + "---wheredata=" + wheredata);
        // result.data =
        // toJs.parse(db.dao.findAll("editor.editorModel.tp_plugin", "code = ?  and XX=?" , [param.code,param.xx]));
        var plugins = toJs.parse(db.dao.findAll("editor.editorModel.tp_plugin", where, wheredata));
        plugins = this.plugin_and_ex(plugins);
        result.data = plugins;
        if (plugins) {
            result.msg = '查询成功';
            result.code = 200;
        }
        return result;
    },
    /**
     * 根据Code查询某一个或者多个
     */
    findByCode: function (param) {
        //console.log("findByCode:" + JSON.stringify(param));
        var plugins = toJs.parse(db.dao.findAll("editor.editorModel.tp_plugin", "code = ?", [param.code]));
        plugins = this.plugin_and_ex(plugins);
        result.data = plugins;
        //console.log("根据Code查询plugins:" + JSON.stringify(plugins));
        if (plugins) {
            result.msg = '查询成功';
            result.code = 200;
        }
        return result;
    },
    /**
     * 根据Code查询最新的控件
     */
    findByCode2Newest: function (param) {
        var plugins;
        var sql = "select * from tp_plugin where ver_id = (select max(ver_id) from tp_plugin where code = ?)";
        plugins = toJs.parse(db.queryForList(sql, [param.code]));
        plugins = this.plugin_and_ex(plugins);
        result.data = plugins;
        if (plugins) {
            result.msg = '查询成功';
            result.code = 200;
        }
        return result;
    },
    plugin_and_ex: function (plugins) {
        var plugin_ex_json;
        for (var i = 0, pl = plugins.length; i < pl; i++) {
            plugin_ex_json = toJs.parse(db.dao.findAll("editor.editorModel.tp_plugin_ex", "ver_id = ?", [plugins[i].ver_id]));
            //console.log("plugin_ex_json.length:" + plugin_ex_json.length);
            if (plugin_ex_json.length != 0) {
                for (var key in plugin_ex_json) {
                    var plugin_ex_json_obj = plugin_ex_json[key];
                    //console.log("plugin_ex_json_obj.field_code:" + plugin_ex_json_obj.field_code);
                    var plugin_ex_json_code = plugin_ex_json_obj.field_code;
                    if (plugin_ex_json_code) {
                        plugin_ex_json_code = plugin_ex_json_code.toLowerCase();// 转小写
                        plugins[i][plugin_ex_json_code] = plugin_ex_json_obj.field_value;
                    } else {
                        logger.info("plugin_ex_json_obj.field_code is null !");
                    }
                }
            }
        }
        return plugins;
    },
    /**
     * 加载所有的
     */
    findAll: function (param) {
        var plugins = toJs.parse(db.dao.findAll("editor.editorModel.tp_plugin"));
        //plugins = this.plugin_and_ex(plugins);
        result.data = plugins;
        if (plugins) {
            result.msg = '查询成功';
            result.code = 200;
        }
        return result;
    },
    /**
     * findExByVid
     */
    findExByVid: function (param) {
        var result = {};
        var plugin_ex_desc = toJs.parse(db.dao.findAll("editor.editorModel.tp_plugin_ex", "ver_id = ?", [param.ver_id]));
        result.data = plugin_ex_desc;
        result.code = 200;
        result.msg = '查询成功';
        return result;
    },
    /**
     * deleteExByid
     */
    deleteExByid: function (param) {

        result.data = toJs.parse(db.dao.remove('editor.editorModel.tp_plugin_ex', "id = ?", [param.id]));
        result.code = 200;
        result.msg = '删除成功';
        return result;
    },
    /**
     * deleteExByVid
     */
    deleteExByVid: function (param) {

        result.data = toJs.parse(db.dao.remove('editor.editorModel.tp_plugin_ex', "ver_id = ?", [param.ver_id]));
        result.code = 200;
        result.msg = '删除成功';
        return result;
    },
    /**
     * 新增控件扩展
     */
    addEx: function (param, tp_plugin) {
        var exs = param.plugin_ex_json;
        var len = exs ? exs.length : 0;
        for (var i = 0; i < len; i++) {
            exs[i].ver_id = tp_plugin.ver_id;
            exs[i].create_time = thisTime;
            if (isDataSeq) {
                var tp_plugin_ex_seq = this.getPluginExSeq();
                exs[i].id = tp_plugin_ex_seq.seqNum;//主键;
            }
            db.dao.insertSelective("editor.editorModel.tp_plugin_ex", exs[i]);
        }
    },
    /**
     * 修改控件扩展
     */
    updateEx: function (param, tp_plugin) {
        //console.log("updateEx_param:"+JSON.stringify(param));
        this.deleteExByVid(param);
        this.addEx(param, tp_plugin);
    },
    /**
     * 新增方法
     */
    add: function (param) {

        var seq_tp_plugin_id = this.getSeqNum({seqName: "SEQ_TP_PLUGIN_ID"});
        param.id = seq_tp_plugin_id.seqNum;//非主键
        if (isDataSeq) {
            var tp_plugin_seq = this.getPluginSeq();
            param.ver_id = tp_plugin_seq.seqNum;//主键;
        }
        param.create_time = thisTime;
        param.status = '0';
        //console.log("addPlugin：" + JSON.stringify(param));
        var tp_plugin = db.dao.insertSelective("editor.editorModel.tp_plugin", param);
        if (tp_plugin) {
            this.addEx(param, tp_plugin);
            result.data = tp_plugin;
            result.code = 200;
            result.msg = '操作成功';// success
        }
        //console.log("tp_plugin：" + JSON.stringify(tp_plugin));
        return result;
    },
    /**
     * : function(param) { var result = this.add(param); return result; },
     *
     * /** 删除方法ById
     */
    deleteById: function (param) {

        this.deleteExByid(param);
        result.data = db.dao.remove('editor.editorModel.tp_plugin', "id = ?", [param.id]);
        result.code = 200;
        result.msg = '删除成功';
        return result;
    },
    /**
     * 删除方法ByVerId
     */
    deleteByVId: function (param) {

        this.deleteExByVid(param);
        result.data = db.dao.remove('editor.editorModel.tp_plugin', "ver_id = ?", [param.ver_id]);
        result.code = 200;
        result.msg = '删除成功';
        return result;
    },
    /**
     * 更新方法
     */
    update: function (param) {
        param.lastupdate_time = thisTime;
        var res = db.dao.updateSelective('editor.editorModel.tp_plugin', param);
        //console.log("res:"+res+",param:"+JSON.stringify(param));
        if (res) {
            var tp_plugins = toJs.parse(db.dao.findAll("editor.editorModel.tp_plugin", "ver_id = ? ", [param.ver_id]));
            var reRes = db.dao.remove('editor.editorModel.tp_plugin_ex', "ver_id = ?", [tp_plugins[0].ver_id]);

            this.updateEx(param, tp_plugins[0]);
            tp_plugins = this.plugin_and_ex(tp_plugins);
            //console.log("tp_plugins:"+JSON.stringify(tp_plugins));
            result.data = tp_plugins[0];
            result.code = 200;
            result.msg = '操作成功';// success
        }
        return result;
    },
    /**
     * 更新控件树字段  20180306 king
     */
    updatePluginTree: function (param) {
        if (param == undefined || param.tree_type_id == undefined) {
            return result;
        }
        var res;
        var sqlself = "UPDATE TP_PLUGIN t SET t.tree_type_id = ? WHERE t.ver_id = ?";
        if (param.ver_id !== undefined) {
            res = db.dao.updateSelective('editor.editorModel.tp_plugin', {
                ver_id: param.ver_id,
                tree_type_id: param.tree_type_id
            });
        } else if (param.ver_id == undefined && param.data !== undefined) {
            for (var key in param.data) {
                var obj = param.data[key];
                res = db.update(sqlself, [param.tree_type_id, obj.ver_id]);
                //console.log(JSON.stringify(obj)+"res:"+res);
            }
        }
        result.data = res;
        result.code = 200;
        result.msg = '操作成功';
        return result;
    },
    /*
     * 获取Plugin序列号
     */
    getPluginSeq: function (params) {
        var seqName1 = "TP_PLUGIN_SEQ";
        return this.getSeqNum({seqName: seqName1});
    },
    /*
     * 获取PluginEx序列号
     */
    getPluginExSeq: function (params) {
        var seqName2 = "TP_PLUGIN_EX_SEQ";
        return this.getSeqNum({seqName: seqName2});
    },
    /*
     * 获取序列号
     */
    getSeqNum: function (params) {
        //console.log("params:"+JSON.stringify(params));
        var par = {
            seqName: params.seqName,
            datasource: datasource,
            funName: "getSeqNum"
        };
        var res = new Service('editor.editorSrvII.seqNumSrv').callService(par);
        return res;
    }
};

return handler[param.funName](param);
