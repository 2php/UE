package com.ry.editor.test;

import java.io.*;
import java.util.ArrayList;
import java.util.List;

/**
 * java实现视频格式的转化
 *
 * @author king
 */
public class TestVideo {
    //ffmpeg存放的路径
    public static String ffmpegPath = "C:\\Users\\KING\\Desktop\\demo\\ffmpeg\\bin\\ffmpeg.exe";

    //mencoder存放的路径
    public static String mencoderPath = "C:\\Users\\KING\\Desktop\\demo\\ffmpeg\\bin\\mencoder.exe";

    //通过mencoder转换成的avi存放路径
    public static String avifilepath = "C:\\Users\\KING\\Desktop\\demo\\temp.avi";

    public static void main(String[] args) {
        long lon = System.currentTimeMillis();
        try {
            String inputStr = "C:\\Users\\KING\\Desktop\\demo\\test.avi";
            String outputStr = "C:\\Users\\KING\\Desktop\\demo\\target.flv";
            TestVideo.convert(inputStr, outputStr);
        } catch (Exception e) {
            e.printStackTrace();
        }
        long lonEnd = System.currentTimeMillis();
        System.out.println("原时间戳和当前时间戳中间相隔:"+( lonEnd - lon )+"毫秒");
        System.out.println("转换结束");
    }

    /**
     * @param inputFile:需要转换的视频
     * @param outputFile：转换后的视频w
     * @return
     */
    public static boolean convert(String inputFile, String outputFile) {
        if (!checkfile(inputFile)) {
            System.out.println(inputFile + " is nokt file");
            return false;
        }
        if (process(inputFile, outputFile)) {

            return true;
        }
        return false;
    }

    // 检查文件是否存在
    private static boolean checkfile(String path) {
        File file = new File(path);
        if (!file.isFile()) {
            return false;
        }
        return true;
    }

    /**
     * @param inputFile
     * @param outputFile
     * @return 转换视频文件
     */
    private static boolean process(String inputFile, String outputFile) {
        int type = checkContentType(inputFile);
        boolean boo = false;
        getffmpegPath();
        if (type == 0) {
            boo = processFLV(inputFile, outputFile);// 直接将文件转为flv文件
        } else if (type == 1) {
            String avifilepath = processAVI(type, inputFile);
            if (avifilepath == null) {
                return false;// avi文件没有得到
            }
            boo = processFLV(avifilepath, outputFile);// 将avi转为flv
        }
        return boo;
    }

    /**
     * ffmpeg能解析的格式：（asx，asf，mpg，wmv，3gp，mp4，mov，avi，flv等）
     */
    private static int checkContentType(String inputFile) {
        String type = inputFile.substring(inputFile.lastIndexOf(".") + 1, inputFile.length()).toLowerCase();

        if ("avi".equals(type)) {
            return 0;
        } else if ("mpg".equals(type)) {
            return 0;
        } else if ("wmv".equals(type)) {
            return 0;
        } else if ("3gp".equals(type)) {
            return 0;
        } else if ("mov".equals(type)) {
            return 0;
        } else if ("mp4".equals(type)) {
            return 0;
        } else if ("asf".equals(type)) {
            return 0;
        } else if ("asx".equals(type)) {
            return 0;
        } else if ("flv".equals(type)) {
            return 0;
        } else if ("rm".equals(type)) {
            return 1;
        } else if ("rmvb".equals(type)) {
            return 1;
        } else if ("wmv9".equals(type)) {
            return 1;
        }
        return 9;
    }

    /**
     * ffmpeg能解析的格式：（asx，asf，mpg，wmv，3gp，mp4，mov，avi，flv等）直接转换为目标视频
     */
    private static void getffmpegPath() {
        String testPath = "C:\\Users\\KING\\Desktop\\demo\\ffmpeg-20171022-72c3d9a-win64-static\\bin\\ffmpeg.exe";
        String os = System.getProperty("os.name").toLowerCase();
        boolean isWindows;
        if (os.indexOf("windows") != -1) {
            isWindows = true;
        } else {
            isWindows = false;
        }

        File temp = new File(System.getProperty("java.io.tmpdir"), "jave-1");
        if (!temp.exists()) {
            temp.mkdirs();
            temp.deleteOnExit();
        }

        String suffix = isWindows ? ".exe" : "";
        File exe = new File(temp, "ffmpeg" + suffix);
        if (!exe.exists()) {
            copyFile("ffmpeg" + suffix, exe);
        }
        ffmpegPath = exe.getAbsolutePath();

    }

    private static void copyFile(String path, File dest) throws RuntimeException {
        InputStream input = null;
        FileOutputStream output = null;

        try {
            input =  TestVideo.class.getResourceAsStream("/conf/"+path);
            output = new FileOutputStream(dest);
            byte[] buffer = new byte[1024];

            int rl;
            while ((rl = input.read(buffer)) != -1) {
                output.write(buffer, 0, rl);
            }
        } catch (IOException var18) {
            throw new RuntimeException("Cannot write file " + dest.getAbsolutePath());
        } finally {
            if (output != null) {
                try {
                    output.close();
                } catch (Throwable var17) {
                    ;
                }
            }

            if (input != null) {
                try {
                    input.close();
                } catch (Throwable var16) {
                    ;
                }
            }

        }

    }

    /**
     * ffmpeg能解析的格式：（asx，asf，mpg，wmv，3gp，mp4，mov，avi，flv等）直接转换为目标视频
     */
    private static boolean processFLV(String inputFile, String outputFile) {
        if (!checkfile(inputFile)) {
            System.out.println(inputFile + " is not file");
            return false;
        }
        List<String> commend = new ArrayList<String>();

        commend.add(ffmpegPath);
        commend.add("-i");
        commend.add(inputFile);
        commend.add("-ab");
        commend.add("128");
        commend.add("-acodec");
        commend.add("libmp3lame");
        commend.add("-ac");
        commend.add("1");
        commend.add("-ar");
        commend.add("22050");
        commend.add("-r");
        commend.add("29.97");
        //高品质
        commend.add("-qscale");
        commend.add("6");
        //低品质
//      commend.add("-b");
//      commend.add("512");
        commend.add("-f");
        commend.add("flv");
        commend.add("-y");

        commend.add(outputFile);
        StringBuffer stringBuffer = new StringBuffer();
        for (int i = 0; i < commend.size(); i++) {
            stringBuffer.append(commend.get(i) + " ");
        }

        System.out.println(stringBuffer);

        try {
            ProcessBuilder builder = new ProcessBuilder();
            builder.command(commend);
            builder.start();
            return true;
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }

    /**
     * ffmpeg能解析的格式：（asx，asf，mpg，wmv，3gp，mp4，mov，avi，flv等）直接转换为目标视频
     */
    private static boolean processFLV2(String inputFile, String outputFile) {
        if (!checkfile(inputFile)) {
            System.out.println(inputFile + " is not file");
            return false;
        }
        List<String> commend = new ArrayList<String>();

        commend.add(ffmpegPath);
        commend.add("-i");
        commend.add(inputFile);
        commend.add("-vcodec");
        commend.add("flv");
        commend.add("-b");
        commend.add("160000");
        commend.add("-r");
        commend.add("15");
        commend.add("-s");
        commend.add("400x300");
        commend.add("-acodec");
        commend.add("libmp3lame");
        commend.add("-ab");
        commend.add("64000");
        commend.add("-ac");
        commend.add("1");
        commend.add("-ar");
        commend.add("22050");
        commend.add("-f");
        commend.add("flv");
        commend.add("-y");
        commend.add(outputFile);
        StringBuffer stringBuffer = new StringBuffer();
        for (int i = 0; i < commend.size(); i++) {
            stringBuffer.append(commend.get(i) + " ");
        }

        System.out.println(stringBuffer);

        try {
            ProcessBuilder builder = new ProcessBuilder();
            builder.command(commend);
            builder.start();
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
        return true;
    }

    /**
     * 对ffmpeg无法解析的文件格式(wmv9，rm，rmvb等),
     * 可以先用别的工具（mencoder）转换为avi(ffmpeg能解析的)格式.
     */
    private static String processAVI(int type, String inputFile) {
        File file = new File(avifilepath);
        if (file.exists()) {
            file.delete();
        }
        List<String> commend = new ArrayList<String>();
        commend.add(mencoderPath);
        commend.add(inputFile);
        commend.add("-oac");
        commend.add("mp3lame");
        commend.add("-lameopts");
        commend.add("preset=64");
        commend.add("-ovc");
        commend.add("xvid");
        commend.add("-xvidencopts");
        commend.add("bitrate=600");
        commend.add("-of");
        commend.add("avi");
        commend.add("-o");

        commend.add(avifilepath);
        StringBuffer stringBuffer = new StringBuffer();
        for (int i = 0; i < commend.size(); i++) {
            stringBuffer.append(commend.get(i) + " ");
        }

        System.out.println(stringBuffer);
        try {
            ProcessBuilder builder = new ProcessBuilder();
            builder.command(commend);
            Process p = builder.start();

            final InputStream is1 = p.getInputStream();
            final InputStream is2 = p.getErrorStream();
            new Thread() {
                public void run() {
                    BufferedReader br = new BufferedReader(
                            new InputStreamReader(is1));
                    try {
                        String lineB = null;
                        while ((lineB = br.readLine()) != null) {
                            if (lineB != null)
                                System.out.println(lineB);
                        }
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
            }.start();
            new Thread() {
                public void run() {
                    BufferedReader br2 = new BufferedReader(
                            new InputStreamReader(is2));
                    try {
                        String lineC = null;
                        while ((lineC = br2.readLine()) != null) {
                            if (lineC != null)
                                System.out.println(lineC);
                        }
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
            }.start();

            // 等Mencoder进程转换结束，再调用ffmepg进程
            p.waitFor();
            System.out.println("who cares");
            return avifilepath;
        } catch (Exception e) {
            System.err.println(e);
            return null;
        }
    }
}
